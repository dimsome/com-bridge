// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MakeSwap extends ethereum.Event {
  get params(): MakeSwap__Params {
    return new MakeSwap__Params(this);
  }
}

export class MakeSwap__Params {
  _event: MakeSwap;

  constructor(event: MakeSwap) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destinationChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get poolBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MakerSwaps extends ethereum.Event {
  get params(): MakerSwaps__Params {
    return new MakerSwaps__Params(this);
  }
}

export class MakerSwaps__Params {
  _event: MakerSwaps;

  constructor(event: MakerSwaps) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationPoolKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get filledMakerSwaps(): Array<MakerSwapsFilledMakerSwapsStruct> {
    return this._event.parameters[2].value.toTupleArray<
      MakerSwapsFilledMakerSwapsStruct
    >();
  }
}

export class MakerSwapsFilledMakerSwapsStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class TakeSwap extends ethereum.Event {
  get params(): TakeSwap__Params {
    return new TakeSwap__Params(this);
  }
}

export class TakeSwap__Params {
  _event: TakeSwap;

  constructor(event: TakeSwap) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationPoolKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class CrossChainSwapper__liquidityPoolsResultQueueDataStruct extends ethereum.Tuple {
  get next(): BigInt {
    return this[0].toBigInt();
  }

  get last(): BigInt {
    return this[1].toBigInt();
  }
}

export class CrossChainSwapper__liquidityPoolsResultPoolDataStruct extends ethereum.Tuple {
  get sourceToken(): Address {
    return this[0].toAddress();
  }

  get destinationToken(): Address {
    return this[1].toAddress();
  }

  get destinationChainId(): BigInt {
    return this[2].toBigInt();
  }

  get rate(): BigInt {
    return this[3].toBigInt();
  }
}

export class CrossChainSwapper__liquidityPoolsResultCcipStruct extends ethereum.Tuple {
  get destinationChainSelector(): BigInt {
    return this[0].toBigInt();
  }

  get destinationSwapper(): Address {
    return this[1].toAddress();
  }
}

export class CrossChainSwapper__liquidityPoolsResult {
  value0: BigInt;
  value1: CrossChainSwapper__liquidityPoolsResultQueueDataStruct;
  value2: CrossChainSwapper__liquidityPoolsResultPoolDataStruct;
  value3: CrossChainSwapper__liquidityPoolsResultCcipStruct;

  constructor(
    value0: BigInt,
    value1: CrossChainSwapper__liquidityPoolsResultQueueDataStruct,
    value2: CrossChainSwapper__liquidityPoolsResultPoolDataStruct,
    value3: CrossChainSwapper__liquidityPoolsResultCcipStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    return map;
  }

  getBalance(): BigInt {
    return this.value0;
  }

  getQueueData(): CrossChainSwapper__liquidityPoolsResultQueueDataStruct {
    return this.value1;
  }

  getPoolData(): CrossChainSwapper__liquidityPoolsResultPoolDataStruct {
    return this.value2;
  }

  getCcip(): CrossChainSwapper__liquidityPoolsResultCcipStruct {
    return this.value3;
  }
}

export class CrossChainSwapper__makerSwapsResultMakerSwaps_Struct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CrossChainSwapper__userBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLocked(): BigInt {
    return this.value0;
  }

  getUnlocked(): BigInt {
    return this.value1;
  }
}

export class CrossChainSwapper extends ethereum.SmartContract {
  static bind(address: Address): CrossChainSwapper {
    return new CrossChainSwapper("CrossChainSwapper", address);
  }

  calcPoolKey(
    sourceToken: Address,
    destinationToken: Address,
    destinationChainId: BigInt,
    rate: BigInt
  ): Bytes {
    let result = super.call(
      "calcPoolKey",
      "calcPoolKey(address,address,uint64,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(sourceToken),
        ethereum.Value.fromAddress(destinationToken),
        ethereum.Value.fromUnsignedBigInt(destinationChainId),
        ethereum.Value.fromUnsignedBigInt(rate)
      ]
    );

    return result[0].toBytes();
  }

  try_calcPoolKey(
    sourceToken: Address,
    destinationToken: Address,
    destinationChainId: BigInt,
    rate: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calcPoolKey",
      "calcPoolKey(address,address,uint64,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(sourceToken),
        ethereum.Value.fromAddress(destinationToken),
        ethereum.Value.fromUnsignedBigInt(destinationChainId),
        ethereum.Value.fromUnsignedBigInt(rate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  linkToken(): Address {
    let result = super.call("linkToken", "linkToken():(address)", []);

    return result[0].toAddress();
  }

  try_linkToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkToken", "linkToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPools(param0: Bytes): CrossChainSwapper__liquidityPoolsResult {
    let result = super.call(
      "liquidityPools",
      "liquidityPools(bytes32):(uint256,(uint128,uint128),(address,address,uint64,uint128),(uint64,address))",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new CrossChainSwapper__liquidityPoolsResult(
      result[0].toBigInt(),
      changetype<CrossChainSwapper__liquidityPoolsResultQueueDataStruct>(
        result[1].toTuple()
      ),
      changetype<CrossChainSwapper__liquidityPoolsResultPoolDataStruct>(
        result[2].toTuple()
      ),
      changetype<CrossChainSwapper__liquidityPoolsResultCcipStruct>(
        result[3].toTuple()
      )
    );
  }

  try_liquidityPools(
    param0: Bytes
  ): ethereum.CallResult<CrossChainSwapper__liquidityPoolsResult> {
    let result = super.tryCall(
      "liquidityPools",
      "liquidityPools(bytes32):(uint256,(uint128,uint128),(address,address,uint64,uint128),(uint64,address))",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossChainSwapper__liquidityPoolsResult(
        value[0].toBigInt(),
        changetype<CrossChainSwapper__liquidityPoolsResultQueueDataStruct>(
          value[1].toTuple()
        ),
        changetype<CrossChainSwapper__liquidityPoolsResultPoolDataStruct>(
          value[2].toTuple()
        ),
        changetype<CrossChainSwapper__liquidityPoolsResultCcipStruct>(
          value[3].toTuple()
        )
      )
    );
  }

  makerSwaps(
    poolKey: Bytes
  ): Array<CrossChainSwapper__makerSwapsResultMakerSwaps_Struct> {
    let result = super.call(
      "makerSwaps",
      "makerSwaps(bytes32):((address,uint256)[])",
      [ethereum.Value.fromFixedBytes(poolKey)]
    );

    return result[0].toTupleArray<
      CrossChainSwapper__makerSwapsResultMakerSwaps_Struct
    >();
  }

  try_makerSwaps(
    poolKey: Bytes
  ): ethereum.CallResult<
    Array<CrossChainSwapper__makerSwapsResultMakerSwaps_Struct>
  > {
    let result = super.tryCall(
      "makerSwaps",
      "makerSwaps(bytes32):((address,uint256)[])",
      [ethereum.Value.fromFixedBytes(poolKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CrossChainSwapper__makerSwapsResultMakerSwaps_Struct
      >()
    );
  }

  sourceChainId(): BigInt {
    let result = super.call("sourceChainId", "sourceChainId():(uint64)", []);

    return result[0].toBigInt();
  }

  try_sourceChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sourceChainId", "sourceChainId():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userBalances(
    param0: Address,
    param1: Address
  ): CrossChainSwapper__userBalancesResult {
    let result = super.call(
      "userBalances",
      "userBalances(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new CrossChainSwapper__userBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<CrossChainSwapper__userBalancesResult> {
    let result = super.tryCall(
      "userBalances",
      "userBalances(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrossChainSwapper__userBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  validPools(param0: Bytes): boolean {
    let result = super.call("validPools", "validPools(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_validPools(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("validPools", "validPools(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validSourceTokens(param0: Address): boolean {
    let result = super.call(
      "validSourceTokens",
      "validSourceTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_validSourceTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validSourceTokens",
      "validSourceTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _sourceChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _validPools(): Array<ConstructorCall_validPoolsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ConstructorCall_validPoolsStruct
    >();
  }

  get _router(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _linkToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_validPoolsStruct extends ethereum.Tuple {
  get sourceToken(): Address {
    return this[0].toAddress();
  }

  get destinationToken(): Address {
    return this[1].toAddress();
  }

  get destinationChainId(): BigInt {
    return this[2].toBigInt();
  }

  get rate(): BigInt {
    return this[3].toBigInt();
  }
}

export class CancelSwapCall extends ethereum.Call {
  get inputs(): CancelSwapCall__Inputs {
    return new CancelSwapCall__Inputs(this);
  }

  get outputs(): CancelSwapCall__Outputs {
    return new CancelSwapCall__Outputs(this);
  }
}

export class CancelSwapCall__Inputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destinationToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CancelSwapCall__Outputs {
  _call: CancelSwapCall;

  constructor(call: CancelSwapCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class MakeSwapCall extends ethereum.Call {
  get inputs(): MakeSwapCall__Inputs {
    return new MakeSwapCall__Inputs(this);
  }

  get outputs(): MakeSwapCall__Outputs {
    return new MakeSwapCall__Outputs(this);
  }
}

export class MakeSwapCall__Inputs {
  _call: MakeSwapCall;

  constructor(call: MakeSwapCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destinationToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MakeSwapCall__Outputs {
  _call: MakeSwapCall;

  constructor(call: MakeSwapCall) {
    this._call = call;
  }
}

export class TakeSwapCall extends ethereum.Call {
  get inputs(): TakeSwapCall__Inputs {
    return new TakeSwapCall__Inputs(this);
  }

  get outputs(): TakeSwapCall__Outputs {
    return new TakeSwapCall__Outputs(this);
  }
}

export class TakeSwapCall__Inputs {
  _call: TakeSwapCall;

  constructor(call: TakeSwapCall) {
    this._call = call;
  }

  get sourceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destinationToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TakeSwapCall__Outputs {
  _call: TakeSwapCall;

  constructor(call: TakeSwapCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
